{"version":3,"sources":["components/Header.tsx","data/enums/messages.enum.ts","components/Body.tsx","components/Notification.tsx","components/Form.tsx","components/WelcomeArea.tsx","components/Message.tsx","components/MessageList.tsx","components/ChatArea.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","MESSAGES","props","className","title","Body","children","Notification","type","elem","message","Form","form","onSubmit","onFormSubmit","class","method","name","autoComplete","input","placeholder","aria-label","ariaLabel","value","inputValue","onChange","event","onInputChange","buttonText","WecomeArea","isVisible","e","onNameChange","onNameSubmit","hasAnyConnectionError","notification","Message","chatBoxRef","useRef","useEffect","current","scrollIntoView","document","querySelector","scrollTop","sender","ref","MessageList","messages","length","map","item","index","id","ChatArea","chat","messageOut","onMessageChange","onMessageSend","socket","io","transports","App","useState","TITLE","setTitle","connected","setConnected","setName","setMessageOut","setChat","setNotification","setHasAnyConnectionError","on","handleMessageOut","out","emit","preventDefault","success","WELCOME","err","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9282d494.chunk.js","sourcesContent":["function Header(props: any) {\n  return (\n    <header className=\"App-header\">\n    <h1>\n      {props.title}\n    </h1>\n  </header>\n  );\n}\n\nexport default Header;\n","export enum MESSAGES {\n    TITLE = `Silviu's Chat Application`,\n    WELCOME = `Welcome, `\n}","export default function Body(props: any) {\n  return (\n    <main>\n      <div>{props.children}</div>\n    </main>\n  );\n}\n","export default function Notification(props: any) {\n    return (\n      <div className={props.type}>\n          <props.elem>{props.message}</props.elem>\n      </div>\n    );\n  }","export default function Form(props: any) {\n  const { form } = props;\n  return (\n    <form\n        onSubmit={props.onFormSubmit}\n        className={form.class}\n        method=\"POST\">\n        <input\n            type=\"text\"\n            name=\"name\"\n            autoComplete=\"off\"\n            className={form.input.class}\n            placeholder={form.input.placeholder}\n            aria-label={form.input.ariaLabel}\n            value={props.inputValue}\n            onChange={event => props.onInputChange(event)}\n        />\n        <button type=\"submit\" className=\"button\">\n            {form.buttonText}\n        </button>\n    </form>\n  );\n}\n","import Notification from './Notification';\nimport Form from './Form';\n\nexport default function WecomeArea(props: any) {\n  const form = {\n    input: {\n      placeholder: 'Please enter your name...',\n      ariaLabel: 'Enter a name to be used in the chat room',\n      class: 'welcome-area-form-input',\n    },\n    buttonText: 'Send',\n    class: \"welcome-area-form\"\n  };\n\n  const onInputChange = (e: Event) => {\n    props.onNameChange(e);\n  }\n\n  const onFormSubmit = (e: Event) => {\n      props.onNameSubmit(e);\n  }\n\n  return props.isVisible ? (\n    <>\n      <div className=\"welcome-area\">\n        <Form\n            form={form}\n            inputValue={props.name}\n            onInputChange={onInputChange}\n            onFormSubmit={onFormSubmit}>\n        </Form>\n      </div>\n      {props.hasAnyConnectionError ? <Notification type=\"error\" elem=\"p\" message={props.notification.message} /> : null}\n    </>\n  ) : null;\n}\n","import { useEffect, useRef } from 'react';\n\nexport default function Message(props: any) {\n  const chatBoxRef = useRef<any>();\n\n  const updateScrollPos = (): void => {\n    chatBoxRef.current.scrollIntoView(true);\n    document.querySelector<any>('.chat-area .chat-area-box').scrollTop += 10;\n  };\n\n  useEffect(() => {\n    if (chatBoxRef && chatBoxRef.current) {\n      updateScrollPos();\n    }\n  });\n\n  return (\n    <div className={props.type}>\n      <div className=\"sender\">{props.sender}</div>\n      <div className=\"message\">\n        <span ref={chatBoxRef}>{props.message}</span>\n      </div>\n    </div>\n  );\n}\n","import Message from './Message';\n\nexport default function MessageList(props: any) {\n    return props.messages.length > 0 ? (\n      <div className=\"message-list\">\n        {props.messages.map((item: any, index: number) => {\n            return (\n              <Message\n                key={item.id || index}\n                type={item.type}\n                sender={item.name}\n                message={item.message} />\n              );\n        })}\n      </div>\n    ): null;\n  }","import MessageList from './MessageList';\nimport Form from './Form';\n\nexport default function ChatArea(props: any) {\n\n  const form = {\n    input: {\n      placeholder: 'Write a message ...',\n      ariaLabel: 'Enter message to send',\n      class: 'chat-area-form-input',\n    },\n    buttonText: 'Send',\n    class: 'chat-area-form',\n  };\n\n  const onInputChange = (e: Event) => {\n    props.onMessageChange(e);\n  };\n\n  const onFormSubmit = (e: Event) => {\n    props.onMessageSend(e);\n  };\n\n  return props.isVisible ? (\n    <div className=\"chat-area\">\n      <div className=\"chat-area-box\">\n        <MessageList messages={props.chat} />\n      </div>\n      <div className=\"chat-area-form-wrapper\">\n        <Form\n            form={form}\n            inputValue={props.messageOut}\n            onInputChange={onInputChange}\n            onFormSubmit={onFormSubmit}>\n        </Form>\n      </div>\n    </div>\n  ) : null;\n}\n","import { useEffect, useState } from 'react';\nimport { io } from 'socket.io-client';\n\nimport './App.scss';\nimport Header from './components/Header';\nimport Body from './components/Body';\nimport WelcomeArea from './components/WelcomeArea';\nimport ChatArea from './components/ChatArea';\n\nimport { MESSAGES } from './data/enums/messages.enum';\nimport { Notification } from './data/models/notification.model';\n\nconst socket = io('/', { transports: ['polling'] });\n\nfunction App() {\n  const [title, setTitle] = useState<MESSAGES | string>(MESSAGES.TITLE);\n  const [connected, setConnected] = useState<boolean>(false);\n  const [name, setName] = useState<string>('');\n  const [messageOut, setMessageOut] = useState<string>('');\n  const [chat, setChat] = useState<any[]>([]);\n  const [notification, setNotification] = useState<Notification>({ message: '', type: 'message' });\n  const [hasAnyConnectionError, setHasAnyConnectionError] = useState<boolean>(false);\n\n  useEffect(() => {\n    socket.on('message', ({ message, sender }: any) => {\n      setChat(chat => [\n        ...chat,\n        {\n          id: chat.length + 1,\n          name: sender,\n          message,\n          type: 'message-in',\n        },\n      ]);\n    });\n  }, []);\n\n  const joinRoom = (e: Event) => {\n    if (e) {\n      e.preventDefault();\n    }\n    if (!connected) {\n      socket.emit('join room', { name });\n      socket.on('connection success', (success: string) => {\n        setConnected(true);\n        setTitle(MESSAGES.WELCOME + name);\n        setNotification({\n          message: success,\n          type: 'message',\n        });\n        setHasAnyConnectionError(false);\n      });\n      socket.on('connection error', (err: string) => {\n        setConnected(false);\n        setNotification({\n          message: err,\n          type: 'error',\n        });\n        setHasAnyConnectionError(true);\n      });\n    }\n  };\n\n  const sendMessage = (e: Event) => {\n    if (e) {\n      e.preventDefault();\n    }\n    if (connected) {\n      handleMessageOut();\n    }\n  };\n\n  const handleMessageOut = (): void => {\n    const out = {\n      id: chat.length + 1,\n      name,\n      message: messageOut,\n      type: 'message-out',\n    };\n    socket.emit('send message', out);\n    setChat([\n      ...chat,\n      out\n    ]);\n    setMessageOut('');\n  };\n\n  const onNameChange = (e: Event): void => {\n    setName((e.target as HTMLTextAreaElement).value || '');\n  };\n\n  const onMessageChange = (e: Event): void => {\n    setMessageOut((e.target as HTMLTextAreaElement).value || '');\n  };\n\n  return (\n    <div className=\"App\">\n      <Header title={title}></Header>\n      <Body>\n        <WelcomeArea\n          isVisible={!connected}\n          name={name}\n          onNameSubmit={joinRoom}\n          onNameChange={onNameChange}\n          hasAnyConnectionError={hasAnyConnectionError}\n          notification={notification}>\n        </WelcomeArea>\n        <ChatArea\n          isVisible={connected}\n          chat={chat}\n          messageOut={messageOut}\n          onMessageChange={onMessageChange}\n          onMessageSend={sendMessage}>\n        </ChatArea>\n      </Body>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}