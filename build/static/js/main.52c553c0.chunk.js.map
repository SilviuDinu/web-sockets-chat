{"version":3,"sources":["components/Header.tsx","data/enums/messages.enum.ts","components/Body.tsx","components/Notification.tsx","components/Form.tsx","components/WelcomeArea.tsx","components/Message.tsx","components/MessageList.tsx","components/ChatArea.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","MESSAGES","props","className","title","Body","children","Notification","type","elem","message","Form","form","onSubmit","onFormSubmit","class","method","name","autoComplete","input","placeholder","aria-label","ariaLabel","value","inputValue","onChange","event","onInputChange","buttonText","WecomeArea","isVisible","e","onNameChange","onNameSubmit","hasAnyConnectionError","notification","Message","chatBoxRef","useRef","useEffect","current","scrollIntoView","document","querySelector","scrollTop","sender","ref","MessageList","messages","length","map","item","index","id","ChatArea","chat","messageOut","onMessageChange","onMessageSend","socket","io","transports","App","useState","TITLE","setTitle","connected","setConnected","setName","setMessageOut","setChat","setNotification","setHasAnyConnectionError","on","handleMessageOut","out","emit","preventDefault","success","WELCOME","err","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.52c553c0.chunk.js","sourcesContent":["function Header(props: any) {\r\n  return (\r\n    <header className=\"App-header\">\r\n    <h1>\r\n      {props.title}\r\n    </h1>\r\n  </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","export enum MESSAGES {\r\n    TITLE = `Silviu's Chat Application`,\r\n    WELCOME = `Welcome, `\r\n}","export default function Body(props: any) {\r\n  return (\r\n    <main>\r\n      <div>{props.children}</div>\r\n    </main>\r\n  );\r\n}\r\n","export default function Notification(props: any) {\r\n    return (\r\n      <div className={props.type}>\r\n          <props.elem>{props.message}</props.elem>\r\n      </div>\r\n    );\r\n  }","export default function Form(props: any) {\r\n  const { form } = props;\r\n  return (\r\n    <form\r\n        onSubmit={props.onFormSubmit}\r\n        className={form.class}\r\n        method=\"POST\">\r\n        <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            autoComplete=\"off\"\r\n            className={form.input.class}\r\n            placeholder={form.input.placeholder}\r\n            aria-label={form.input.ariaLabel}\r\n            value={props.inputValue}\r\n            onChange={event => props.onInputChange(event)}\r\n        />\r\n        <button type=\"submit\" className=\"button\">\r\n            {form.buttonText}\r\n        </button>\r\n    </form>\r\n  );\r\n}\r\n","import Notification from './Notification';\r\nimport Form from './Form';\r\n\r\nexport default function WecomeArea(props: any) {\r\n  const form = {\r\n    input: {\r\n      placeholder: 'Please enter your name...',\r\n      ariaLabel: 'Enter a name to be used in the chat room',\r\n      class: 'welcome-area-form-input',\r\n    },\r\n    buttonText: 'Send',\r\n    class: \"welcome-area-form\"\r\n  };\r\n\r\n  const onInputChange = (e: Event) => {\r\n    props.onNameChange(e);\r\n  }\r\n\r\n  const onFormSubmit = (e: Event) => {\r\n      props.onNameSubmit(e);\r\n  }\r\n\r\n  return props.isVisible ? (\r\n    <>\r\n      <div className=\"welcome-area\">\r\n        <Form\r\n            form={form}\r\n            inputValue={props.name}\r\n            onInputChange={onInputChange}\r\n            onFormSubmit={onFormSubmit}>\r\n        </Form>\r\n      </div>\r\n      {props.hasAnyConnectionError ? <Notification type=\"error\" elem=\"p\" message={props.notification.message} /> : null}\r\n    </>\r\n  ) : null;\r\n}\r\n","import { useEffect, useRef } from 'react';\r\n\r\nexport default function Message(props: any) {\r\n  const chatBoxRef = useRef<any>();\r\n\r\n  const updateScrollPos = (): void => {\r\n    chatBoxRef.current.scrollIntoView(true);\r\n    document.querySelector<any>('.chat-area .chat-area-box').scrollTop += 10;\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (chatBoxRef && chatBoxRef.current) {\r\n      updateScrollPos();\r\n    }\r\n  });\r\n\r\n  return (\r\n    <div className={props.type}>\r\n      <div className=\"sender\">{props.sender}</div>\r\n      <div className=\"message\">\r\n        <span ref={chatBoxRef}>{props.message}</span>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import Message from './Message';\r\n\r\nexport default function MessageList(props: any) {\r\n    return props.messages.length > 0 ? (\r\n      <div className=\"message-list\">\r\n        {props.messages.map((item: any, index: number) => {\r\n            return (\r\n              <Message\r\n                key={item.id || index}\r\n                type={item.type}\r\n                sender={item.name}\r\n                message={item.message} />\r\n              );\r\n        })}\r\n      </div>\r\n    ): null;\r\n  }","import MessageList from './MessageList';\r\nimport Form from './Form';\r\n\r\nexport default function ChatArea(props: any) {\r\n\r\n  const form = {\r\n    input: {\r\n      placeholder: 'Write a message ...',\r\n      ariaLabel: 'Enter message to send',\r\n      class: 'chat-area-form-input',\r\n    },\r\n    buttonText: 'Send',\r\n    class: 'chat-area-form',\r\n  };\r\n\r\n  const onInputChange = (e: Event) => {\r\n    props.onMessageChange(e);\r\n  };\r\n\r\n  const onFormSubmit = (e: Event) => {\r\n    props.onMessageSend(e);\r\n  };\r\n\r\n  return props.isVisible ? (\r\n    <div className=\"chat-area\">\r\n      <div className=\"chat-area-box\">\r\n        <MessageList messages={props.chat} />\r\n      </div>\r\n      <div className=\"chat-area-form-wrapper\">\r\n        <Form\r\n            form={form}\r\n            inputValue={props.messageOut}\r\n            onInputChange={onInputChange}\r\n            onFormSubmit={onFormSubmit}>\r\n        </Form>\r\n      </div>\r\n    </div>\r\n  ) : null;\r\n}\r\n","import { useEffect, useState } from 'react';\r\nimport { io } from 'socket.io-client';\r\n\r\nimport './App.scss';\r\nimport Header from './components/Header';\r\nimport Body from './components/Body';\r\nimport WelcomeArea from './components/WelcomeArea';\r\nimport ChatArea from './components/ChatArea';\r\n\r\nimport { MESSAGES } from './data/enums/messages.enum';\r\nimport { Notification } from './data/models/notification.model';\r\n\r\nconst socket = io('/', { transports: ['polling'] });\r\n\r\nfunction App() {\r\n  const [title, setTitle] = useState<MESSAGES | string>(MESSAGES.TITLE);\r\n  const [connected, setConnected] = useState<boolean>(false);\r\n  const [name, setName] = useState<string>('');\r\n  const [messageOut, setMessageOut] = useState<string>('');\r\n  const [chat, setChat] = useState<any[]>([]);\r\n  const [notification, setNotification] = useState<Notification>({ message: '', type: 'message' });\r\n  const [hasAnyConnectionError, setHasAnyConnectionError] = useState<boolean>(false);\r\n\r\n  useEffect(() => {\r\n    socket.on('message', ({ message, sender }: any) => {\r\n      setChat(chat => [\r\n        ...chat,\r\n        {\r\n          id: chat.length + 1,\r\n          name: sender,\r\n          message,\r\n          type: 'message-in',\r\n        },\r\n      ]);\r\n    });\r\n  }, []);\r\n\r\n  const joinRoom = (e: Event) => {\r\n    if (e) {\r\n      e.preventDefault();\r\n    }\r\n    if (!connected) {\r\n      socket.emit('join room', { name });\r\n      socket.on('connection success', (success: string) => {\r\n        setConnected(true);\r\n        setTitle(MESSAGES.WELCOME + name);\r\n        setNotification({\r\n          message: success,\r\n          type: 'message',\r\n        });\r\n        setHasAnyConnectionError(false);\r\n      });\r\n      socket.on('connection error', (err: string) => {\r\n        setConnected(false);\r\n        setNotification({\r\n          message: err,\r\n          type: 'error',\r\n        });\r\n        setHasAnyConnectionError(true);\r\n      });\r\n    }\r\n  };\r\n\r\n  const sendMessage = (e: Event) => {\r\n    if (e) {\r\n      e.preventDefault();\r\n    }\r\n    if (connected) {\r\n      handleMessageOut();\r\n    }\r\n  };\r\n\r\n  const handleMessageOut = (): void => {\r\n    const out = {\r\n      id: chat.length + 1,\r\n      name,\r\n      message: messageOut,\r\n      type: 'message-out',\r\n    };\r\n    socket.emit('send message', out);\r\n    setChat([\r\n      ...chat,\r\n      out\r\n    ]);\r\n    setMessageOut('');\r\n  };\r\n\r\n  const onNameChange = (e: Event): void => {\r\n    setName((e.target as HTMLTextAreaElement).value || '');\r\n  };\r\n\r\n  const onMessageChange = (e: Event): void => {\r\n    setMessageOut((e.target as HTMLTextAreaElement).value || '');\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Header title={title}></Header>\r\n      <Body>\r\n        <WelcomeArea\r\n          isVisible={!connected}\r\n          name={name}\r\n          onNameSubmit={joinRoom}\r\n          onNameChange={onNameChange}\r\n          hasAnyConnectionError={hasAnyConnectionError}\r\n          notification={notification}>\r\n        </WelcomeArea>\r\n        <ChatArea\r\n          isVisible={connected}\r\n          chat={chat}\r\n          messageOut={messageOut}\r\n          onMessageChange={onMessageChange}\r\n          onMessageSend={sendMessage}>\r\n        </ChatArea>\r\n      </Body>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.scss';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}