{"version":3,"sources":["components/Header.tsx","data/enums/messages.enum.ts","components/Body.tsx","components/Notification.tsx","components/Form.tsx","components/WelcomeArea.tsx","components/Message.tsx","components/MessageList.tsx","components/ChatArea.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","MESSAGES","props","className","title","Body","children","Notification","type","elem","message","Form","form","onSubmit","onFormSubmit","class","method","name","autoComplete","input","placeholder","aria-label","ariaLabel","value","inputValue","onChange","event","onInputChange","buttonText","WecomeArea","isVisible","e","onNameChange","onNameSubmit","hasAnyConnectionError","notification","Message","chatBoxRef","useRef","useEffect","current","scrollIntoView","element","document","querySelector","scrollTop","updateScrollPos","sender","ref","MessageList","messages","length","map","item","index","id","ChatArea","chat","typing","enabled","messageOut","onMessageChange","onMessageSend","App","socket","url","TITLE","connected","state","resetTyping","setState","joinRoom","preventDefault","emit","on","success","WELCOME","err","sendMessage","handleMessageOut","out","target","msg","io","transports","this","setTimeout","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.142e95bb.chunk.js","sourcesContent":["function Header(props: any) {\n  return (\n    <header className=\"App-header\">\n    <h1>\n      {props.title}\n    </h1>\n  </header>\n  );\n}\n\nexport default Header;\n","export enum MESSAGES {\n    TITLE = `Silviu's Chat Application`,\n    WELCOME = `Welcome, `\n}","export default function Body(props: any) {\n  return (\n    <main>\n      <div>{props.children}</div>\n    </main>\n  );\n}\n","export default function Notification(props: any) {\n    return (\n      <div className={props.type}>\n          <props.elem>{props.message}</props.elem>\n      </div>\n    );\n  }","export default function Form(props: any) {\n  const { form } = props;\n  return (\n    <form\n        onSubmit={props.onFormSubmit}\n        className={form.class}\n        method=\"POST\">\n        <input\n            type=\"text\"\n            name=\"name\"\n            autoComplete=\"off\"\n            className={form.input.class}\n            placeholder={form.input.placeholder}\n            aria-label={form.input.ariaLabel}\n            value={props.inputValue}\n            onChange={event => props.onInputChange(event)}\n        />\n        <button type=\"submit\" className=\"button\">\n            {form.buttonText}\n        </button>\n    </form>\n  );\n}\n","import Notification from './Notification';\nimport Form from './Form';\n\nexport default function WecomeArea(props: any) {\n  const form = {\n    input: {\n      placeholder: 'Please enter your name...',\n      ariaLabel: 'Enter a name to be used in the chat room',\n      class: 'welcome-area-form-input',\n    },\n    buttonText: 'Send',\n    class: \"welcome-area-form\"\n  };\n\n  const onInputChange = (e: Event) => {\n    props.onNameChange(e);\n  }\n\n  const onFormSubmit = (e: Event) => {\n      props.onNameSubmit(e);\n  }\n\n  return props.isVisible ? (\n    <>\n      <div className=\"welcome-area\">\n        <Form\n            form={form}\n            inputValue={props.name}\n            onInputChange={onInputChange}\n            onFormSubmit={onFormSubmit}>\n        </Form>\n      </div>\n      {props.hasAnyConnectionError ? <Notification type=\"error\" elem=\"p\" message={props.notification.message} /> : null}\n    </>\n  ) : null;\n}\n","import { useEffect, useRef } from 'react';\n\nexport default function Message(props: any) {\n  const chatBoxRef = useRef<any>();\n\n  const updateScrollPos = (): void => {\n    chatBoxRef.current.scrollIntoView(true);\n    const element = document.querySelector<any>('.chat-area .chat-area-box');\n    if(element) {\n      element.scrollTop += 10;\n    }\n  };\n\n  useEffect(() => {\n    if (chatBoxRef && chatBoxRef.current) {\n      updateScrollPos();\n    }\n  });\n\n  return (\n    <div className={props.type}>\n      <div className=\"sender\">{props.sender}</div>\n      <div className=\"message\">\n        <span ref={chatBoxRef}>{props.message}</span>\n      </div>\n    </div>\n  );\n}\n","import Message from './Message';\n\nexport default function MessageList(props: any) {\n    return props.messages.length > 0 ? (\n      <div className=\"message-list\">\n        {props.messages.map((item: any, index: number) => {\n            return (\n              <Message\n                key={item.id || index}\n                type={item.type}\n                sender={item.name || null}\n                message={item.message} />\n              );\n        })}\n      </div>\n    ): null;\n  }","import MessageList from './MessageList';\nimport Notification from './Notification';\nimport Form from './Form';\n\nexport default function ChatArea(props: any) {\n\n  const form = {\n    input: {\n      placeholder: 'Write a message ...',\n      ariaLabel: 'Enter message to send',\n      class: 'chat-area-form-input',\n    },\n    buttonText: 'Send',\n    class: 'chat-area-form',\n  };\n\n  const onInputChange = (e: Event) => {\n    props.onMessageChange(e);\n  };\n\n  const onFormSubmit = (e: Event) => {\n    props.onMessageSend(e);\n  };\n\n  return props.isVisible ? (\n    <div className=\"chat-area\">\n      <div className=\"chat-area-box\">\n        <MessageList messages={props.chat} />\n        {props.typing.enabled ? <Notification\n          type=\"temporary\"\n          elem=\"span\"\n          message={props.typing.message} /> : null }\n      </div>\n      <div className=\"chat-area-form-wrapper\">\n        <Form\n            form={form}\n            inputValue={props.messageOut}\n            onInputChange={onInputChange}\n            onFormSubmit={onFormSubmit}>\n        </Form>\n      </div>\n    </div>\n  ) : null;\n}\n","import React from 'react';\nimport { io } from 'socket.io-client';\n\nimport './App.scss';\nimport Header from './components/Header';\nimport Body from './components/Body';\nimport WelcomeArea from './components/WelcomeArea';\nimport ChatArea from './components/ChatArea';\n\nimport { MESSAGES } from './data/enums/messages.enum';\nimport { Notification } from './data/models/notification.model';\n\n// const url = process.env.NODE_ENV === 'test' ? '' : `/`;\n// const socket = io(url, { transports: ['polling'] });\nexport default class App extends React.Component {\n\n  socket: any;\n  url = process.env.NODE_ENV === 'test' ? '' : `/`;\n\n  title: MESSAGES | string = MESSAGES.TITLE;\n  connected: boolean = false;\n  name: string = '';\n  messageOut: string = '';\n  chat: any[] = [];\n  typing: { message: string; enabled: boolean } = {\n    message: '',\n    enabled: false,\n  };\n  notification: Notification = { message: '', type: 'message' };\n  hasAnyConnectionError: boolean = false;\n\n  state = {\n    title: this.title,\n    connected: this.connected,\n    name: this.name,\n    messageOut: this.messageOut,\n    chat: this.chat,\n    typing: this.typing,\n    notification: this.connected,\n    hasAnyConnectionError: this.hasAnyConnectionError,\n  };\n\n  constructor(props: any) {\n    super(props);\n    this.socket = io(this.url, { transports: ['polling'] });\n  }\n\n  componentDidMount() {\n    this.socket.on('message', ({ message, sender }: any) => {\n      this.setState(\n        {\n          chat: [\n            ...this.state.chat,\n            {\n              id: this.state.chat.length + 1,\n              name: sender,\n              message,\n              type: 'message-in',\n            },\n          ],\n        },\n        () => this.resetTyping()\n      );\n    });\n\n    this.socket.on('typing', (message: string) => {\n      this.setState({\n        typing: {\n          enabled: true,\n          message,\n        },\n      });\n      setTimeout((): void => {\n        this.resetTyping();\n      }, 4000);\n    });\n  }\n\n  resetTyping = (): void => {\n    this.setState({\n      typing: {\n        enabled: false,\n        message: '',\n      },\n    });\n  };\n\n  joinRoom = (e: Event) => {\n    if (e) {\n      e.preventDefault();\n    }\n    const { connected, name } = this.state;\n    if (!connected) {\n      this.socket.emit('join room', { name });\n      this.socket.on('connection success', (success: string) => {\n        this.setState({\n          connected: true,\n          title: MESSAGES.WELCOME + name,\n          notification: {\n            message: success,\n            type: 'message',\n          },\n          chat: [\n            ...this.state.chat,\n            {\n              id: this.state.chat.length + 1,\n              message: success,\n              type: 'notification',\n            },\n          ],\n          hasAnyConnectionError: false,\n        });\n      });\n      this.socket.on('connection error', (err: string) => {\n        this.setState({\n          connected: false,\n          notification: {\n            message: err,\n            type: 'error',\n          },\n          hasAnyConnectionError: true,\n        });\n      });\n    }\n  };\n\n  sendMessage = (e: Event) => {\n    if (e) {\n      e.preventDefault();\n    }\n\n    const { connected } = this.state;\n\n    if (connected) {\n      this.handleMessageOut();\n    }\n  };\n\n  handleMessageOut = (): void => {\n    const out = {\n      id: this.state.chat.length + 1,\n      name: this.state.name,\n      message: this.state.messageOut,\n      type: 'message-out',\n    };\n    this.socket.emit('send message', out);\n    this.setState({\n      chat: [...this.state.chat, out],\n      messageOut: '',\n    });\n  };\n\n  onNameChange = (e: Event): void => {\n    const name = (e.target as HTMLTextAreaElement).value || '';\n    this.setState({\n      name,\n    });\n  };\n\n  onMessageChange = (e: Event): void => {\n    this.socket.emit('start typing', { name: this.state.name });\n    const msg = (e.target as HTMLTextAreaElement).value || '';\n    this.setState({\n      messageOut: msg,\n    });\n  };\n\n  render() {\n    const { title, connected, hasAnyConnectionError, chat, typing, messageOut, notification, name } = this.state;\n    return (\n      <div className=\"App\">\n        <Header title={title}></Header>\n        <Body>\n          <WelcomeArea\n            isVisible={!connected}\n            name={name}\n            onNameSubmit={this.joinRoom}\n            onNameChange={this.onNameChange}\n            hasAnyConnectionError={hasAnyConnectionError}\n            notification={notification}></WelcomeArea>\n          <ChatArea\n            isVisible={connected}\n            chat={chat}\n            typing={typing}\n            messageOut={messageOut}\n            onMessageChange={this.onMessageChange}\n            onMessageSend={this.sendMessage}></ChatArea>\n        </Body>\n      </div>\n    );\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}